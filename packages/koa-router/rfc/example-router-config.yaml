# В DEV режиме идет наблюдение за этим файлом, и конфиг меняется при его изменении
# В DEV режиме возможно использование *.ts файлов

options:                                      # optional
  middlewarePath: ./middleware                    # default "middleware" if exists
  controllersPath: ./controllers                  # default "controllers" if exists

middleware:
  is_auth: is-auth.middleware      # название файла в папке указанной в "options.middleware"
  is_guest: is-not-auth.middleware
  is_admin: is-admin.middleware


routes:
  # simplest example with required params
  - name: BlogList
    path: /blog
    controller: blog::getArticleList

  - name: ShowBlogItem            # алиас, доступен через ctx.router.currentRoute.name
    prefix: /blog
    path: /:id                    # => /blog/:id    - так как есть префикс
    controller: blog::getArticle  # В паке из "options.controllers" в файле "blog.ts" используем функцию "getArticle" `export const getArticle =(...) => {...}`
    methods: GET|HEAD             # default * (ALL) awailible: 'ALL', 'GET', 'HEAD', 'PUT', 'DELETE', 'OPTIONS', 'TRACE'
    middleware:
      - is_guest
      - is_auth
      - is_admin
    requirements:
      id: '\d+'                    # правила валидации, для итогового пути (/blog/:id)
    response:
      header: text/html           # в DEV режиме логировать ошибки если что то переписывает эти параметры
      status: 200

  - prefix: /api
    importConfigPath: '../feature/dashboard'
